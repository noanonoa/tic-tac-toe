# TIC-TAC-TOE

//********************
**   REQUIREMENTS   **
********************//
- [x] A user should be able to click on different squares to make a move. (JS Function)
- [x] Every click will alternate between marking an `X` and `O`. (JS Function)
- [x] Upon marking of an individual cell, use JavaScript to add a class to each cell to display 	the separate players.
- [x] Display a message to indicate which turn is about to be played. (HTML <div> and JS 		Function)
- [x] Detect draw conditions (ties & cat's game) (JS Function)
- [x] Detect winner: Stop game and declare the winner if one player ends up getting three in a row.
      Hint: Determine a set of winning combinations.  Check those combinations on the board contents after everyone move.

//********************
**       BONUS      **
********************//
- [ ] Implement your reset button without refreshing the whole page
- [ ] Track player's wins over time
- [ ] Add a simple AI to support one player vs computer mode.  In this case, "simple" just means having the computer pick a random empty square.
- [ ] Make your computer seem more human by adding a short time delay between your turn and the computer's turn.
- [ ] Style it up! Get creative, or even make a theme!
- [ ] SUPER BONUS: Add an AI that can beat you every time with the mini-max algorithm.



//*********************
**     GAME PLAN     **
*********************//


## HTML

- [x] 3x3 Grid Container (board div)
- [x] 9 Grids represented by 9 divs (Child divs)
- [x] A div for players' turn message (top or bottom of `gameBox`)



## CSS

- [x] Mark up for `X` and `O` (images? text?)
- [x] Center `gameBox` and message <div>



## JS

### Variables
#### DOM Manipulation (UI)
- [x] var.getElementById's for each div (variables that can later be accessed with functions)
- [x] Function for `user` to be able to click on squares (needs .addEventListener 'click')
- [x] If a div contains an answer, then cannot click that space anymore

#### Game Logic
- [ ] A reset function (BONUS: do it without refreshing the page)
- [x] Function for each click to alternate between `X` and `O`

		Look into using % (modulus) to produce a value of `0` or `1` to loop through for 		alternating values
- [x] Loop players' array through win conditions







//******************
** Thinking Space **
******************//
- [ ] change combinations' background to highlight winning moves
	- [ ] This needs to be done by `.classList.add` and `.classList.remove`

- [x] .push() e.target.id into the array of player X or player O

- [ ] create a `endGame` function
	- [ ] removes all event listeners so no one can play anymore
	call `endGame` right after counter === 3 in checkWin()


	
- [ ] print winner/draw on message box
	if (win condition) { gamePrompt.textContent = "winner"; }
	else { gamePrompt.textContent = "draw"; }


//******************
**   Bug Issues   **
******************//
- [ ] 'Draw' state happens on the last possible move--even if playerX wins on the last move